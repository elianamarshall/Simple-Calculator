			MOV		R0, #12 ; initialize operand 1
			MOV		R1, #4 ; initialize operand 2
			MOV		R3, #47 ; initialize operator
			MOV		R4, R1 ; copy R1 to R4
			MOV		R5, R0 ; copy R0 to R5
			
			CMP		R3, #43 ; check if R3 == 43
			BEQ		ADDITION ; if R3 == 43, jump to addition
			
			CMP		R3, #45 ; check if R3 == 45
			BEQ		SUBTRACTION ; if R3 == 45, jump to subtraction
			
			CMP		R3, #42 ; check if R3 == 42
			BEQ		MULTIPLICATION ; if R3 == 42, jump to multiplication
			
			CMP		R3, #47 ; check if R3 == 47
			BEQ		DIVISION ; if R3 == 47, jump to division
			
ADDITION
			ADD		R2, R0, R1 ; R2 = R0 + R1
			END		; exit program
			
SUBTRACTION
			SUB		R2, R0, R1 ; R2 = R0 - R1
			END		; exit program
			
MULTIPLICATION
			ADD		R2, R2, R0 ; R2 = R2 + R0
			SUBS		R4, R4, #1 ; decrement R4
			BNE		MULTIPLICATION ; repeat until R4 == 0
			
			END		; exit program
			
DIVISION
			CMP		R1, #0 ; check if R1 == 0
			BEQ		END_DIVISION ; if R1 == 0, jump to END_DIVISION because division by 0 not allowed
			
			CMP		R5, R1 ; check if R5 < R1
			BLT		END_DIVISION ; if R5 < R1, jump to END_DIVISION
			
			SUB		R5, R5, R1 ; R5 = R5 - R1
			ADD		R2, R2, #1 ; increment R2
			B		DIVISION ; repeat until R5 < R1
			
END_DIVISION
			END		; exit program
